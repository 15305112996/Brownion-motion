import random
import numpy as np
import matplotlib.pyplot as plt

def random_walk(n):
    values = [0]

    for _ in range(n):
        step = random.choice([-1, 1])
        values.append(values[-1] + step)

    return values



# define s and d uniform to the simple random walk
num_steps = 10
s = random_walk(num_steps)
d = random_walk(num_steps)

# compute the price process p
p = [0]
for i in range(1, num_steps + 1):
    p.append(p[i - 1] + max(d[i] - s[i], 0))

# generate time series
t = list(range(num_steps + 1))

# plot the figure of s,d,p with respect to t in discrete time 
plt.figure(figsize=(10, 6))
plt.plot(t, s, label='s', linewidth=1)
plt.plot(t, d, label='d', linewidth=1)
plt.plot(t, p, label='p', linewidth=1)
plt.title('Discrete Time')
plt.xlabel('Time')
plt.ylabel('Value')
plt.legend()
plt.grid(True)
plt.show()

# when the time interval approaches to 0, i.e discrete time become continuous time
t_continuous = np.linspace(0, num_steps, num=num_steps*10)
s_continuous = np.interp(t_continuous, t, s)
d_continuous = np.interp(t_continuous, t, d)
p_continuous = np.zeros_like(t_continuous)

# compute the price process p with respect to t in continuous time
for i in range(1, len(t_continuous)):
    p_continuous[i] = p_continuous[i - 1] + max(d_continuous[i] - s_continuous[i], 0)

# plot the figure of s,d,p with t in continuous time 
plt.figure(figsize=(10, 6))
plt.plot(t_continuous, s_continuous, label='s', linewidth=1)
plt.plot(t_continuous, d_continuous, label='d', linewidth=1)
plt.plot(t_continuous, p_continuous, label='p', linewidth=1)
plt.title('Continuous Time')
plt.xlabel('Time')
plt.ylabel('Value')
plt.legend()
plt.grid(True)
plt.show()


